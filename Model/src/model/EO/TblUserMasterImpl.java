package model.EO;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 06 13:34:46 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblUserMasterImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        UserMasterId,
        UserMasterName,
        UserMasterPwd,
        Ast,
        RoleMasterId,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        TblRoleMaster;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int USERMASTERID = AttributesEnum.UserMasterId.index();
    public static final int USERMASTERNAME = AttributesEnum.UserMasterName.index();
    public static final int USERMASTERPWD = AttributesEnum.UserMasterPwd.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int ROLEMASTERID = AttributesEnum.RoleMasterId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int TBLROLEMASTER = AttributesEnum.TblRoleMaster.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblUserMasterImpl() {
    }

    /**
     * Gets the attribute value for UserMasterId, using the alias name UserMasterId.
     * @return the value of UserMasterId
     */
    public Number getUserMasterId() {
        return (Number) getAttributeInternal(USERMASTERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserMasterId.
     * @param value value to set the UserMasterId
     */
    public void setUserMasterId(Number value) {
        setAttributeInternal(USERMASTERID, value);
    }

    /**
     * Gets the attribute value for UserMasterName, using the alias name UserMasterName.
     * @return the value of UserMasterName
     */
    public String getUserMasterName() {
        return (String) getAttributeInternal(USERMASTERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserMasterName.
     * @param value value to set the UserMasterName
     */
    public void setUserMasterName(String value) {
        setAttributeInternal(USERMASTERNAME, value);
    }

    /**
     * Gets the attribute value for UserMasterPwd, using the alias name UserMasterPwd.
     * @return the value of UserMasterPwd
     */
    public String getUserMasterPwd() {
        return (String) getAttributeInternal(USERMASTERPWD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserMasterPwd.
     * @param value value to set the UserMasterPwd
     */
    public void setUserMasterPwd(String value) {
        setAttributeInternal(USERMASTERPWD, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for RoleMasterId, using the alias name RoleMasterId.
     * @return the value of RoleMasterId
     */
    public Number getRoleMasterId() {
        return (Number) getAttributeInternal(ROLEMASTERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RoleMasterId.
     * @param value value to set the RoleMasterId
     */
    public void setRoleMasterId(Number value) {
        setAttributeInternal(ROLEMASTERID, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * @return the associated entity TblRoleMasterImpl.
     */
    public TblRoleMasterImpl getTblRoleMaster() {
        return (TblRoleMasterImpl) getAttributeInternal(TBLROLEMASTER);
    }

    /**
     * Sets <code>value</code> as the associated entity TblRoleMasterImpl.
     */
    public void setTblRoleMaster(TblRoleMasterImpl value) {
        setAttributeInternal(TBLROLEMASTER, value);
    }

    /**
     * @param userMasterId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number userMasterId) {
        return new Key(new Object[] { userMasterId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblUserMaster");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
         try {
             loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
         } catch(Exception ex) {
             ex.printStackTrace();
         }
         
         if (operation == DML_INSERT) {
             setCreatedBy(loginId);
             setUpdatedBy(loginId);
             } else if(operation == DML_UPDATE) {
             setUpdatedBy(loginId);
         }
        super.doDML(operation, e);
    }
}

