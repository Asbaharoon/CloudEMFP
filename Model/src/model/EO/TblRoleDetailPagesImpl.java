package model.EO;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 06 13:07:41 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblRoleDetailPagesImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        RoleDetailPagesId,
        RoleMasterId,
        PagesId,
        RView,
        RAdd,
        REdit,
        RDelete,
        RPrint,
        RPost,
        RoleDetailModulesId,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        TblPages,
        TblRoleMaster;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ROLEDETAILPAGESID = AttributesEnum.RoleDetailPagesId.index();
    public static final int ROLEMASTERID = AttributesEnum.RoleMasterId.index();
    public static final int PAGESID = AttributesEnum.PagesId.index();
    public static final int RVIEW = AttributesEnum.RView.index();
    public static final int RADD = AttributesEnum.RAdd.index();
    public static final int REDIT = AttributesEnum.REdit.index();
    public static final int RDELETE = AttributesEnum.RDelete.index();
    public static final int RPRINT = AttributesEnum.RPrint.index();
    public static final int RPOST = AttributesEnum.RPost.index();
    public static final int ROLEDETAILMODULESID = AttributesEnum.RoleDetailModulesId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int TBLPAGES = AttributesEnum.TblPages.index();
    public static final int TBLROLEMASTER = AttributesEnum.TblRoleMaster.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblRoleDetailPagesImpl() {
    }

    /**
     * Gets the attribute value for RoleDetailPagesId, using the alias name RoleDetailPagesId.
     * @return the value of RoleDetailPagesId
     */
    public Number getRoleDetailPagesId() {
        return (Number) getAttributeInternal(ROLEDETAILPAGESID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RoleDetailPagesId.
     * @param value value to set the RoleDetailPagesId
     */
    public void setRoleDetailPagesId(Number value) {
        setAttributeInternal(ROLEDETAILPAGESID, value);
    }

    /**
     * Gets the attribute value for RoleMasterId, using the alias name RoleMasterId.
     * @return the value of RoleMasterId
     */
    public Number getRoleMasterId() {
        return (Number) getAttributeInternal(ROLEMASTERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RoleMasterId.
     * @param value value to set the RoleMasterId
     */
    public void setRoleMasterId(Number value) {
        setAttributeInternal(ROLEMASTERID, value);
    }

    /**
     * Gets the attribute value for PagesId, using the alias name PagesId.
     * @return the value of PagesId
     */
    public Number getPagesId() {
        return (Number) getAttributeInternal(PAGESID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PagesId.
     * @param value value to set the PagesId
     */
    public void setPagesId(Number value) {
        setAttributeInternal(PAGESID, value);
    }

    /**
     * Gets the attribute value for RView, using the alias name RView.
     * @return the value of RView
     */
    public String getRView() {
        return (String) getAttributeInternal(RVIEW);
    }

    /**
     * Sets <code>value</code> as the attribute value for RView.
     * @param value value to set the RView
     */
    public void setRView(String value) {
        setAttributeInternal(RVIEW, value);
    }

    /**
     * Gets the attribute value for RAdd, using the alias name RAdd.
     * @return the value of RAdd
     */
    public String getRAdd() {
        return (String) getAttributeInternal(RADD);
    }

    /**
     * Sets <code>value</code> as the attribute value for RAdd.
     * @param value value to set the RAdd
     */
    public void setRAdd(String value) {
        setAttributeInternal(RADD, value);
    }

    /**
     * Gets the attribute value for REdit, using the alias name REdit.
     * @return the value of REdit
     */
    public String getREdit() {
        return (String) getAttributeInternal(REDIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for REdit.
     * @param value value to set the REdit
     */
    public void setREdit(String value) {
        setAttributeInternal(REDIT, value);
    }

    /**
     * Gets the attribute value for RDelete, using the alias name RDelete.
     * @return the value of RDelete
     */
    public String getRDelete() {
        return (String) getAttributeInternal(RDELETE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RDelete.
     * @param value value to set the RDelete
     */
    public void setRDelete(String value) {
        setAttributeInternal(RDELETE, value);
    }

    /**
     * Gets the attribute value for RPrint, using the alias name RPrint.
     * @return the value of RPrint
     */
    public String getRPrint() {
        return (String) getAttributeInternal(RPRINT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RPrint.
     * @param value value to set the RPrint
     */
    public void setRPrint(String value) {
        setAttributeInternal(RPRINT, value);
    }

    /**
     * Gets the attribute value for RPost, using the alias name RPost.
     * @return the value of RPost
     */
    public String getRPost() {
        return (String) getAttributeInternal(RPOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for RPost.
     * @param value value to set the RPost
     */
    public void setRPost(String value) {
        setAttributeInternal(RPOST, value);
    }

    /**
     * Gets the attribute value for RoleDetailModulesId, using the alias name RoleDetailModulesId.
     * @return the value of RoleDetailModulesId
     */
    public Number getRoleDetailModulesId() {
        return (Number) getAttributeInternal(ROLEDETAILMODULESID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RoleDetailModulesId.
     * @param value value to set the RoleDetailModulesId
     */
    public void setRoleDetailModulesId(Number value) {
        setAttributeInternal(ROLEDETAILMODULESID, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTblPages() {
        return (EntityImpl) getAttributeInternal(TBLPAGES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblPages(EntityImpl value) {
        setAttributeInternal(TBLPAGES, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTblRoleMaster() {
        return (EntityImpl) getAttributeInternal(TBLROLEMASTER);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblRoleMaster(EntityImpl value) {
        setAttributeInternal(TBLROLEMASTER, value);
    }

    /**
     * @param roleDetailPagesId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number roleDetailPagesId) {
        return new Key(new Object[] { roleDetailPagesId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblRoleDetailPages");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
         try {
             loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
         } catch(Exception ex) {
             ex.printStackTrace();
         }
         
         if (operation == DML_INSERT) {
             setCreatedBy(loginId);
             setUpdatedBy(loginId);
             } else if(operation == DML_UPDATE) {
             setUpdatedBy(loginId);
         }
        super.doDML(operation, e);
    }
}

