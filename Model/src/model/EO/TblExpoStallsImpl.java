package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 30 12:36:55 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblExpoStallsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ExpoStallsId,
        ExpoHallsId,
        StallNo,
        StallName,
        StallType,
        StallDimension,
        StallArea,
        StallValue,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        TblExpoHalls,
        TblStallsAlloc;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int EXPOSTALLSID = AttributesEnum.ExpoStallsId.index();
    public static final int EXPOHALLSID = AttributesEnum.ExpoHallsId.index();
    public static final int STALLNO = AttributesEnum.StallNo.index();
    public static final int STALLNAME = AttributesEnum.StallName.index();
    public static final int STALLTYPE = AttributesEnum.StallType.index();
    public static final int STALLDIMENSION = AttributesEnum.StallDimension.index();
    public static final int STALLAREA = AttributesEnum.StallArea.index();
    public static final int STALLVALUE = AttributesEnum.StallValue.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int TBLEXPOHALLS = AttributesEnum.TblExpoHalls.index();
    public static final int TBLSTALLSALLOC = AttributesEnum.TblStallsAlloc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblExpoStallsImpl() {
    }

    /**
     * Gets the attribute value for ExpoStallsId, using the alias name ExpoStallsId.
     * @return the value of ExpoStallsId
     */
    public BigDecimal getExpoStallsId() {
        return (BigDecimal) getAttributeInternal(EXPOSTALLSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpoStallsId.
     * @param value value to set the ExpoStallsId
     */
    public void setExpoStallsId(BigDecimal value) {
        setAttributeInternal(EXPOSTALLSID, value);
    }

    /**
     * Gets the attribute value for ExpoHallsId, using the alias name ExpoHallsId.
     * @return the value of ExpoHallsId
     */
    public BigDecimal getExpoHallsId() {
        return (BigDecimal) getAttributeInternal(EXPOHALLSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpoHallsId.
     * @param value value to set the ExpoHallsId
     */
    public void setExpoHallsId(BigDecimal value) {
        setAttributeInternal(EXPOHALLSID, value);
    }

    /**
     * Gets the attribute value for StallNo, using the alias name StallNo.
     * @return the value of StallNo
     */
    public BigDecimal getStallNo() {
        return (BigDecimal) getAttributeInternal(STALLNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for StallNo.
     * @param value value to set the StallNo
     */
    public void setStallNo(BigDecimal value) {
        setAttributeInternal(STALLNO, value);
    }

    /**
     * Gets the attribute value for StallName, using the alias name StallName.
     * @return the value of StallName
     */
    public String getStallName() {
        return (String) getAttributeInternal(STALLNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for StallName.
     * @param value value to set the StallName
     */
    public void setStallName(String value) {
        setAttributeInternal(STALLNAME, value);
    }

    /**
     * Gets the attribute value for StallType, using the alias name StallType.
     * @return the value of StallType
     */
    public String getStallType() {
        return (String) getAttributeInternal(STALLTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StallType.
     * @param value value to set the StallType
     */
    public void setStallType(String value) {
        setAttributeInternal(STALLTYPE, value);
    }

    /**
     * Gets the attribute value for StallDimension, using the alias name StallDimension.
     * @return the value of StallDimension
     */
    public String getStallDimension() {
        return (String) getAttributeInternal(STALLDIMENSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for StallDimension.
     * @param value value to set the StallDimension
     */
    public void setStallDimension(String value) {
        setAttributeInternal(STALLDIMENSION, value);
    }

    /**
     * Gets the attribute value for StallArea, using the alias name StallArea.
     * @return the value of StallArea
     */
    public String getStallArea() {
        return (String) getAttributeInternal(STALLAREA);
    }

    /**
     * Sets <code>value</code> as the attribute value for StallArea.
     * @param value value to set the StallArea
     */
    public void setStallArea(String value) {
        setAttributeInternal(STALLAREA, value);
    }

    /**
     * Gets the attribute value for StallValue, using the alias name StallValue.
     * @return the value of StallValue
     */
    public BigDecimal getStallValue() {
        return (BigDecimal) getAttributeInternal(STALLVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StallValue.
     * @param value value to set the StallValue
     */
    public void setStallValue(BigDecimal value) {
        setAttributeInternal(STALLVALUE, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @return the associated entity TblExpoHallsImpl.
     */
    public TblExpoHallsImpl getTblExpoHalls() {
        return (TblExpoHallsImpl) getAttributeInternal(TBLEXPOHALLS);
    }

    /**
     * Sets <code>value</code> as the associated entity TblExpoHallsImpl.
     */
    public void setTblExpoHalls(TblExpoHallsImpl value) {
        setAttributeInternal(TBLEXPOHALLS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblStallsAlloc() {
        return (RowIterator) getAttributeInternal(TBLSTALLSALLOC);
    }

    /**
     * @param expoStallsId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal expoStallsId) {
        return new Key(new Object[] { expoStallsId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblExpoStalls");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                 try {
                     loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUID"));
                 } catch(Exception ex) {
                     ex.printStackTrace();
                 }
                 
                 if (operation == DML_INSERT) {
                     setCreatedBy(loginId);
                     setUpdatedBy(loginId);
                     } else if(operation == DML_UPDATE) {
                     setUpdatedBy(loginId);
                 }
        super.doDML(operation, e);
    }
}

