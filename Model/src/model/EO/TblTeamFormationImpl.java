package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jul 27 16:26:08 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblTeamFormationImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TeamFormationId,
        TrainerId,
        TeamId,
        Ast,
        TrainerType,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        TblTeam,
        TblTrainer;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int TEAMFORMATIONID = AttributesEnum.TeamFormationId.index();
    public static final int TRAINERID = AttributesEnum.TrainerId.index();
    public static final int TEAMID = AttributesEnum.TeamId.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int TRAINERTYPE = AttributesEnum.TrainerType.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int TBLTEAM = AttributesEnum.TblTeam.index();
    public static final int TBLTRAINER = AttributesEnum.TblTrainer.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblTeamFormationImpl() {
    }

    /**
     * Gets the attribute value for TeamFormationId, using the alias name TeamFormationId.
     * @return the value of TeamFormationId
     */
    public BigDecimal getTeamFormationId() {
        return (BigDecimal) getAttributeInternal(TEAMFORMATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TeamFormationId.
     * @param value value to set the TeamFormationId
     */
    public void setTeamFormationId(BigDecimal value) {
        setAttributeInternal(TEAMFORMATIONID, value);
    }

    /**
     * Gets the attribute value for TrainerId, using the alias name TrainerId.
     * @return the value of TrainerId
     */
    public BigDecimal getTrainerId() {
        return (BigDecimal) getAttributeInternal(TRAINERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TrainerId.
     * @param value value to set the TrainerId
     */
    public void setTrainerId(BigDecimal value) {
        setAttributeInternal(TRAINERID, value);
    }

    /**
     * Gets the attribute value for TeamId, using the alias name TeamId.
     * @return the value of TeamId
     */
    public BigDecimal getTeamId() {
        return (BigDecimal) getAttributeInternal(TEAMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TeamId.
     * @param value value to set the TeamId
     */
    public void setTeamId(BigDecimal value) {
        setAttributeInternal(TEAMID, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for TrainerType, using the alias name TrainerType.
     * @return the value of TrainerType
     */
    public String getTrainerType() {
        return (String) getAttributeInternal(TRAINERTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TrainerType.
     * @param value value to set the TrainerType
     */
    public void setTrainerType(String value) {
        setAttributeInternal(TRAINERTYPE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public BigDecimal getCreatedBy() {
        return (BigDecimal) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(BigDecimal value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public BigDecimal getUpdatedBy() {
        return (BigDecimal) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(BigDecimal value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * @return the associated entity TblTeamImpl.
     */
    public TblTeamImpl getTblTeam() {
        return (TblTeamImpl) getAttributeInternal(TBLTEAM);
    }

    /**
     * Sets <code>value</code> as the associated entity TblTeamImpl.
     */
    public void setTblTeam(TblTeamImpl value) {
        setAttributeInternal(TBLTEAM, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTblTrainer() {
        return (EntityImpl) getAttributeInternal(TBLTRAINER);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblTrainer(EntityImpl value) {
        setAttributeInternal(TBLTRAINER, value);
    }

    /**
     * @param teamFormationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal teamFormationId) {
        return new Key(new Object[] { teamFormationId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblTeamFormation");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        BigDecimal loginId = null;
        try {
            loginId = new BigDecimal((String) ADFContext.getCurrent().getSessionScope().get("sessUID"));
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        
        if (operation == DML_INSERT) {
            setCreatedBy(loginId);
            setUpdatedBy(loginId);
            } else if(operation == DML_UPDATE) {
            setUpdatedBy(loginId);
        }
        super.doDML(operation, e);
    }
}

