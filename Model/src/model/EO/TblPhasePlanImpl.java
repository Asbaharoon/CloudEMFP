package model.EO;

import oracle.jbo.domain.Number;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 16 15:37:38 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblPhasePlanImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PhasePlanId,
        PhaseId,
        CropId,
        CityLibrDetail,
        DistrictLibrDetail,
        TargetArea,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        TblPhase;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PHASEPLANID = AttributesEnum.PhasePlanId.index();
    public static final int PHASEID = AttributesEnum.PhaseId.index();
    public static final int CROPID = AttributesEnum.CropId.index();
    public static final int CITYLIBRDETAIL = AttributesEnum.CityLibrDetail.index();
    public static final int DISTRICTLIBRDETAIL = AttributesEnum.DistrictLibrDetail.index();
    public static final int TARGETAREA = AttributesEnum.TargetArea.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int TBLPHASE = AttributesEnum.TblPhase.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblPhasePlanImpl() {
    }

    /**
     * Gets the attribute value for PhasePlanId, using the alias name PhasePlanId.
     * @return the value of PhasePlanId
     */
    public Number getPhasePlanId() {
        return (Number) getAttributeInternal(PHASEPLANID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhasePlanId.
     * @param value value to set the PhasePlanId
     */
    public void setPhasePlanId(Number value) {
        setAttributeInternal(PHASEPLANID, value);
    }

    /**
     * Gets the attribute value for PhaseId, using the alias name PhaseId.
     * @return the value of PhaseId
     */
    public Number getPhaseId() {
        return (Number) getAttributeInternal(PHASEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhaseId.
     * @param value value to set the PhaseId
     */
    public void setPhaseId(Number value) {
        setAttributeInternal(PHASEID, value);
    }

    /**
     * Gets the attribute value for CropId, using the alias name CropId.
     * @return the value of CropId
     */
    public Number getCropId() {
        return (Number) getAttributeInternal(CROPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CropId.
     * @param value value to set the CropId
     */
    public void setCropId(Number value) {
        setAttributeInternal(CROPID, value);
    }

    /**
     * Gets the attribute value for CityLibrDetail, using the alias name CityLibrDetail.
     * @return the value of CityLibrDetail
     */
    public Number getCityLibrDetail() {
        return (Number) getAttributeInternal(CITYLIBRDETAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for CityLibrDetail.
     * @param value value to set the CityLibrDetail
     */
    public void setCityLibrDetail(Number value) {
        setAttributeInternal(CITYLIBRDETAIL, value);
    }

    /**
     * Gets the attribute value for DistrictLibrDetail, using the alias name DistrictLibrDetail.
     * @return the value of DistrictLibrDetail
     */
    public Number getDistrictLibrDetail() {
        return (Number) getAttributeInternal(DISTRICTLIBRDETAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for DistrictLibrDetail.
     * @param value value to set the DistrictLibrDetail
     */
    public void setDistrictLibrDetail(Number value) {
        setAttributeInternal(DISTRICTLIBRDETAIL, value);
    }

    /**
     * Gets the attribute value for TargetArea, using the alias name TargetArea.
     * @return the value of TargetArea
     */
    public Number getTargetArea() {
        return (Number) getAttributeInternal(TARGETAREA);
    }

    /**
     * Sets <code>value</code> as the attribute value for TargetArea.
     * @param value value to set the TargetArea
     */
    public void setTargetArea(Number value) {
        setAttributeInternal(TARGETAREA, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * @return the associated entity TblPhaseImpl.
     */
    public TblPhaseImpl getTblPhase() {
        return (TblPhaseImpl) getAttributeInternal(TBLPHASE);
    }

    /**
     * Sets <code>value</code> as the associated entity TblPhaseImpl.
     */
    public void setTblPhase(TblPhaseImpl value) {
        setAttributeInternal(TBLPHASE, value);
    }

    /**
     * @param phasePlanId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number phasePlanId) {
        return new Key(new Object[] { phasePlanId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblPhasePlan");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
         try {
             loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUID"));
         } catch(Exception ex) {
             ex.printStackTrace();
         }
         
         if (operation == DML_INSERT) {
             setCreatedBy(loginId);
             setUpdatedBy(loginId);
             } else if(operation == DML_UPDATE) {
             setUpdatedBy(loginId);
         }
        super.doDML(operation, e);
    }
}

