package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 30 12:34:45 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblExpoSchImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ExpoSchId,
        Name,
        ExpoSchMonth,
        CropId,
        PhaseId,
        Ast,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        ExpoType,
        SchYear,
        TblExpoSetup,
        TblExpoSchCrop;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EXPOSCHID = AttributesEnum.ExpoSchId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int EXPOSCHMONTH = AttributesEnum.ExpoSchMonth.index();
    public static final int CROPID = AttributesEnum.CropId.index();
    public static final int PHASEID = AttributesEnum.PhaseId.index();
    public static final int AST = AttributesEnum.Ast.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int EXPOTYPE = AttributesEnum.ExpoType.index();
    public static final int SCHYEAR = AttributesEnum.SchYear.index();
    public static final int TBLEXPOSETUP = AttributesEnum.TblExpoSetup.index();
    public static final int TBLEXPOSCHCROP = AttributesEnum.TblExpoSchCrop.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblExpoSchImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblExpoSch");
    }


    /**
     * Gets the attribute value for ExpoSchId, using the alias name ExpoSchId.
     * @return the value of ExpoSchId
     */
    public BigDecimal getExpoSchId() {
        return (BigDecimal) getAttributeInternal(EXPOSCHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpoSchId.
     * @param value value to set the ExpoSchId
     */
    public void setExpoSchId(BigDecimal value) {
        setAttributeInternal(EXPOSCHID, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for ExpoSchMonth, using the alias name ExpoSchMonth.
     * @return the value of ExpoSchMonth
     */
    public String getExpoSchMonth() {
        return (String) getAttributeInternal(EXPOSCHMONTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpoSchMonth.
     * @param value value to set the ExpoSchMonth
     */
    public void setExpoSchMonth(String value) {
        setAttributeInternal(EXPOSCHMONTH, value);
    }

    /**
     * Gets the attribute value for CropId, using the alias name CropId.
     * @return the value of CropId
     */
    public BigDecimal getCropId() {
        return (BigDecimal) getAttributeInternal(CROPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CropId.
     * @param value value to set the CropId
     */
    public void setCropId(BigDecimal value) {
        setAttributeInternal(CROPID, value);
    }

    /**
     * Gets the attribute value for PhaseId, using the alias name PhaseId.
     * @return the value of PhaseId
     */
    public BigDecimal getPhaseId() {
        return (BigDecimal) getAttributeInternal(PHASEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhaseId.
     * @param value value to set the PhaseId
     */
    public void setPhaseId(BigDecimal value) {
        setAttributeInternal(PHASEID, value);
    }

    /**
     * Gets the attribute value for Ast, using the alias name Ast.
     * @return the value of Ast
     */
    public String getAst() {
        return (String) getAttributeInternal(AST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ast.
     * @param value value to set the Ast
     */
    public void setAst(String value) {
        setAttributeInternal(AST, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for ExpoType, using the alias name ExpoType.
     * @return the value of ExpoType
     */
    public String getExpoType() {
        return (String) getAttributeInternal(EXPOTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpoType.
     * @param value value to set the ExpoType
     */
    public void setExpoType(String value) {
        setAttributeInternal(EXPOTYPE, value);
    }

    /**
     * Gets the attribute value for SchYear, using the alias name SchYear.
     * @return the value of SchYear
     */
    public BigDecimal getSchYear() {
        return (BigDecimal) getAttributeInternal(SCHYEAR);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchYear.
     * @param value value to set the SchYear
     */
    public void setSchYear(BigDecimal value) {
        setAttributeInternal(SCHYEAR, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblExpoSetup() {
        return (RowIterator) getAttributeInternal(TBLEXPOSETUP);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblExpoSchCrop() {
        return (RowIterator) getAttributeInternal(TBLEXPOSCHCROP);
    }


    /**
     * @param expoSchId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal expoSchId) {
        return new Key(new Object[] { expoSchId });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                 try {
                     loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
                 } catch(Exception ex) {
                     ex.printStackTrace();
                 }
                 
                 if (operation == DML_INSERT) {
                     setCreatedBy(loginId);
                     setUpdatedBy(loginId);
                     } else if(operation == DML_UPDATE) {
                     setUpdatedBy(loginId);
                 }
        super.doDML(operation, e);
    }
}

