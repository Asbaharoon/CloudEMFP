package model.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 30 12:21:51 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblExhibitorsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ExhibitorsId,
        ExpoSetupId,
        Name,
        Representative,
        ExhibitorType,
        ExhibitorProd,
        LibrCountryId,
        ExhibitorStatus,
        StallAllocType,
        FarmerRegId,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        TblB2bMeeting,
        TblExpoSetup,
        TblStallsAlloc;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int EXHIBITORSID = AttributesEnum.ExhibitorsId.index();
    public static final int EXPOSETUPID = AttributesEnum.ExpoSetupId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int REPRESENTATIVE = AttributesEnum.Representative.index();
    public static final int EXHIBITORTYPE = AttributesEnum.ExhibitorType.index();
    public static final int EXHIBITORPROD = AttributesEnum.ExhibitorProd.index();
    public static final int LIBRCOUNTRYID = AttributesEnum.LibrCountryId.index();
    public static final int EXHIBITORSTATUS = AttributesEnum.ExhibitorStatus.index();
    public static final int STALLALLOCTYPE = AttributesEnum.StallAllocType.index();
    public static final int FARMERREGID = AttributesEnum.FarmerRegId.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int TBLB2BMEETING = AttributesEnum.TblB2bMeeting.index();
    public static final int TBLEXPOSETUP = AttributesEnum.TblExpoSetup.index();
    public static final int TBLSTALLSALLOC = AttributesEnum.TblStallsAlloc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblExhibitorsImpl() {
    }

    /**
     * Gets the attribute value for ExhibitorsId, using the alias name ExhibitorsId.
     * @return the value of ExhibitorsId
     */
    public BigDecimal getExhibitorsId() {
        return (BigDecimal) getAttributeInternal(EXHIBITORSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExhibitorsId.
     * @param value value to set the ExhibitorsId
     */
    public void setExhibitorsId(BigDecimal value) {
        setAttributeInternal(EXHIBITORSID, value);
    }

    /**
     * Gets the attribute value for ExpoSetupId, using the alias name ExpoSetupId.
     * @return the value of ExpoSetupId
     */
    public BigDecimal getExpoSetupId() {
        return (BigDecimal) getAttributeInternal(EXPOSETUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpoSetupId.
     * @param value value to set the ExpoSetupId
     */
    public void setExpoSetupId(BigDecimal value) {
        setAttributeInternal(EXPOSETUPID, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for Representative, using the alias name Representative.
     * @return the value of Representative
     */
    public String getRepresentative() {
        return (String) getAttributeInternal(REPRESENTATIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Representative.
     * @param value value to set the Representative
     */
    public void setRepresentative(String value) {
        setAttributeInternal(REPRESENTATIVE, value);
    }

    /**
     * Gets the attribute value for ExhibitorType, using the alias name ExhibitorType.
     * @return the value of ExhibitorType
     */
    public String getExhibitorType() {
        return (String) getAttributeInternal(EXHIBITORTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExhibitorType.
     * @param value value to set the ExhibitorType
     */
    public void setExhibitorType(String value) {
        setAttributeInternal(EXHIBITORTYPE, value);
    }

    /**
     * Gets the attribute value for ExhibitorProd, using the alias name ExhibitorProd.
     * @return the value of ExhibitorProd
     */
    public String getExhibitorProd() {
        return (String) getAttributeInternal(EXHIBITORPROD);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExhibitorProd.
     * @param value value to set the ExhibitorProd
     */
    public void setExhibitorProd(String value) {
        setAttributeInternal(EXHIBITORPROD, value);
    }

    /**
     * Gets the attribute value for LibrCountryId, using the alias name LibrCountryId.
     * @return the value of LibrCountryId
     */
    public BigDecimal getLibrCountryId() {
        return (BigDecimal) getAttributeInternal(LIBRCOUNTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LibrCountryId.
     * @param value value to set the LibrCountryId
     */
    public void setLibrCountryId(BigDecimal value) {
        setAttributeInternal(LIBRCOUNTRYID, value);
    }

    /**
     * Gets the attribute value for ExhibitorStatus, using the alias name ExhibitorStatus.
     * @return the value of ExhibitorStatus
     */
    public String getExhibitorStatus() {
        return (String) getAttributeInternal(EXHIBITORSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExhibitorStatus.
     * @param value value to set the ExhibitorStatus
     */
    public void setExhibitorStatus(String value) {
        setAttributeInternal(EXHIBITORSTATUS, value);
    }

    /**
     * Gets the attribute value for StallAllocType, using the alias name StallAllocType.
     * @return the value of StallAllocType
     */
    public String getStallAllocType() {
        return (String) getAttributeInternal(STALLALLOCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StallAllocType.
     * @param value value to set the StallAllocType
     */
    public void setStallAllocType(String value) {
        setAttributeInternal(STALLALLOCTYPE, value);
    }

    /**
     * Gets the attribute value for FarmerRegId, using the alias name FarmerRegId.
     * @return the value of FarmerRegId
     */
    public BigDecimal getFarmerRegId() {
        return (BigDecimal) getAttributeInternal(FARMERREGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FarmerRegId.
     * @param value value to set the FarmerRegId
     */
    public void setFarmerRegId(BigDecimal value) {
        setAttributeInternal(FARMERREGID, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblB2bMeeting() {
        return (RowIterator) getAttributeInternal(TBLB2BMEETING);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTblExpoSetup() {
        return (EntityImpl) getAttributeInternal(TBLEXPOSETUP);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblExpoSetup(EntityImpl value) {
        setAttributeInternal(TBLEXPOSETUP, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblStallsAlloc() {
        return (RowIterator) getAttributeInternal(TBLSTALLSALLOC);
    }

    /**
     * @param exhibitorsId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal exhibitorsId) {
        return new Key(new Object[] { exhibitorsId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EO.TblExhibitors");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                 try {
                     loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessRID"));
                 } catch(Exception ex) {
                     ex.printStackTrace();
                 }
                 
                 if (operation == DML_INSERT) {
                     setCreatedBy(loginId);
                     setUpdatedBy(loginId);
                     } else if(operation == DML_UPDATE) {
                     setUpdatedBy(loginId);
                 }
        super.doDML(operation, e);
    }
}

